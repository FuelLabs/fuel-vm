#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
#[allow(non_camel_case_types)]
pub enum OpcodeRepr {
    ADD = 0x10,
    ADDI = 0x11,
    AND = 0x12,
    ANDI = 0x13,
    DIV = 0x14,
    DIVI = 0x15,
    EQ = 0x16,
    EXP = 0x17,
    EXPI = 0x18,
    GT = 0x19,
    LT = 0x1a,
    MLOG = 0x1b,
    MROO = 0x1c,
    MOD = 0x1d,
    MODI = 0x1e,
    MOVE = 0x1f,
    MUL = 0x20,
    MULI = 0x21,
    NOT = 0x22,
    OR = 0x23,
    ORI = 0x24,
    SLL = 0x25,
    SLLI = 0x26,
    SRL = 0x27,
    SRLI = 0x28,
    SUB = 0x29,
    SUBI = 0x2a,
    XOR = 0x2b,
    XORI = 0x2c,
    CIMV = 0x30,
    CTMV = 0x31,
    JI = 0x32,
    JNEI = 0x33,
    RET = 0x34,
    RETD = 0x35,
    CFEI = 0x40,
    CFSI = 0x41,
    LB = 0x42,
    LW = 0x43,
    ALOC = 0x44,
    MCL = 0x45,
    MCLI = 0x46,
    MCP = 0x47,
    MEQ = 0x48,
    SB = 0x49,
    SW = 0x4a,
    BHSH = 0x50,
    BHEI = 0x51,
    BURN = 0x52,
    CALL = 0x53,
    CCP = 0x54,
    CROO = 0x55,
    CSIZ = 0x56,
    CB = 0x57,
    LDC = 0x58,
    LOG = 0x59,
    LOGD = 0x5a,
    MINT = 0x5b,
    RVRT = 0x5c,
    SLDC = 0x5d,
    SRW = 0x5e,
    SRWQ = 0x5f,
    SWW = 0x60,
    SWWQ = 0x61,
    TR = 0x62,
    TRO = 0x63,
    ECR = 0x70,
    K256 = 0x71,
    S256 = 0x72,
    XIL = 0x80,
    XIS = 0x81,
    XOL = 0x82,
    XOS = 0x83,
    XWL = 0x84,
    XWS = 0x85,
    NOOP = 0xf0,
    FLAG = 0xf1,
    GM = 0xf2,
    UNDEFINED = 0x00,
}

impl From<u8> for OpcodeRepr {
    fn from(b: u8) -> Self {
        Self::from_u8(b)
    }
}

impl OpcodeRepr {
    /// Const fn implementation of `From<u8>`
    pub const fn from_u8(b: u8) -> Self {
        match b {
            0x10 => Self::ADD,
            0x11 => Self::ADDI,
            0x12 => Self::AND,
            0x13 => Self::ANDI,
            0x14 => Self::DIV,
            0x15 => Self::DIVI,
            0x16 => Self::EQ,
            0x17 => Self::EXP,
            0x18 => Self::EXPI,
            0x19 => Self::GT,
            0x1a => Self::LT,
            0x1b => Self::MLOG,
            0x1c => Self::MROO,
            0x1d => Self::MOD,
            0x1e => Self::MODI,
            0x1f => Self::MOVE,
            0x20 => Self::MUL,
            0x21 => Self::MULI,
            0x22 => Self::NOT,
            0x23 => Self::OR,
            0x24 => Self::ORI,
            0x25 => Self::SLL,
            0x26 => Self::SLLI,
            0x27 => Self::SRL,
            0x28 => Self::SRLI,
            0x29 => Self::SUB,
            0x2a => Self::SUBI,
            0x2b => Self::XOR,
            0x2c => Self::XORI,
            0x30 => Self::CIMV,
            0x31 => Self::CTMV,
            0x32 => Self::JI,
            0x33 => Self::JNEI,
            0x34 => Self::RET,
            0x35 => Self::RETD,
            0x40 => Self::CFEI,
            0x41 => Self::CFSI,
            0x42 => Self::LB,
            0x43 => Self::LW,
            0x44 => Self::ALOC,
            0x45 => Self::MCL,
            0x46 => Self::MCLI,
            0x47 => Self::MCP,
            0x48 => Self::MEQ,
            0x49 => Self::SB,
            0x4a => Self::SW,
            0x50 => Self::BHSH,
            0x51 => Self::BHEI,
            0x52 => Self::BURN,
            0x53 => Self::CALL,
            0x54 => Self::CCP,
            0x55 => Self::CROO,
            0x56 => Self::CSIZ,
            0x57 => Self::CB,
            0x58 => Self::LDC,
            0x59 => Self::LOG,
            0x5a => Self::LOGD,
            0x5b => Self::MINT,
            0x5c => Self::RVRT,
            0x5d => Self::SLDC,
            0x5e => Self::SRW,
            0x5f => Self::SRWQ,
            0x60 => Self::SWW,
            0x61 => Self::SWWQ,
            0x62 => Self::TR,
            0x63 => Self::TRO,
            0x70 => Self::ECR,
            0x71 => Self::K256,
            0x72 => Self::S256,
            0x80 => Self::XIL,
            0x81 => Self::XIS,
            0x82 => Self::XOL,
            0x83 => Self::XOS,
            0x84 => Self::XWL,
            0x85 => Self::XWS,
            0xf0 => Self::NOOP,
            0xf1 => Self::FLAG,
            0xf2 => Self::GM,
            _ => Self::UNDEFINED,
        }
    }
}
