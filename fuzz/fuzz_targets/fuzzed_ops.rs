use fuel_vm::prelude::{Opcode, RegisterId, Immediate12, Immediate18, Immediate24};

#[derive(arbitrary::Arbitrary, Debug, Copy, Clone)]
pub enum FuzzedOp {
    ADD(RegisterId, RegisterId, RegisterId),
    ADDI(RegisterId, RegisterId, Immediate12),
    AND(RegisterId, RegisterId, RegisterId),
    ANDI(RegisterId, RegisterId, Immediate12),
    DIV(RegisterId, RegisterId, RegisterId),
    DIVI(RegisterId, RegisterId, Immediate12),
    EQ(RegisterId, RegisterId, RegisterId),
    EXP(RegisterId, RegisterId, RegisterId),
    EXPI(RegisterId, RegisterId, Immediate12),
    GT(RegisterId, RegisterId, RegisterId),
    LT(RegisterId, RegisterId, RegisterId),
    MLOG(RegisterId, RegisterId, RegisterId),
    MROO(RegisterId, RegisterId, RegisterId),
    MOD(RegisterId, RegisterId, RegisterId),
    MODI(RegisterId, RegisterId, Immediate12),
    MOVE(RegisterId, RegisterId),
    MOVI(RegisterId, Immediate18),
    MUL(RegisterId, RegisterId, RegisterId),
    MULI(RegisterId, RegisterId, Immediate12),
    NOT(RegisterId, RegisterId),
    OR(RegisterId, RegisterId, RegisterId),
    ORI(RegisterId, RegisterId, Immediate12),
    SLL(RegisterId, RegisterId, RegisterId),
    SLLI(RegisterId, RegisterId, Immediate12),
    SRL(RegisterId, RegisterId, RegisterId),
    SRLI(RegisterId, RegisterId, Immediate12),
    SUB(RegisterId, RegisterId, RegisterId),
    SUBI(RegisterId, RegisterId, Immediate12),
    XOR(RegisterId, RegisterId, RegisterId),
    XORI(RegisterId, RegisterId, Immediate12),
    JI(Immediate24),
    JNEI(RegisterId, RegisterId, Immediate12),
    JNZI(RegisterId, Immediate18),
    JMP(RegisterId),
    JNE(RegisterId, RegisterId, RegisterId),
    RET(RegisterId),
    RETD(RegisterId, RegisterId),
    CFEI(Immediate24),
    CFSI(Immediate24),
    LB(RegisterId, RegisterId, Immediate12),
    LW(RegisterId, RegisterId, Immediate12),
    ALOC(RegisterId),
    MCL(RegisterId, RegisterId),
    MCLI(RegisterId, Immediate18),
    MCP(RegisterId, RegisterId, RegisterId),
    MCPI(RegisterId, RegisterId, Immediate12),
    MEQ(RegisterId, RegisterId, RegisterId, RegisterId),
    SB(RegisterId, RegisterId, Immediate12),
    SW(RegisterId, RegisterId, Immediate12),
    BAL(RegisterId, RegisterId, RegisterId),
    BHSH(RegisterId, RegisterId),
    BHEI(RegisterId),
    BURN(RegisterId),
    CALL(RegisterId, RegisterId, RegisterId, RegisterId),
    CCP(RegisterId, RegisterId, RegisterId, RegisterId),
    CROO(RegisterId, RegisterId),
    CSIZ(RegisterId, RegisterId),
    CB(RegisterId),
    LDC(RegisterId, RegisterId, RegisterId),
    LOG(RegisterId, RegisterId, RegisterId, RegisterId),
    LOGD(RegisterId, RegisterId, RegisterId, RegisterId),
    MINT(RegisterId),
    RVRT(RegisterId),
    SMO(RegisterId, RegisterId, RegisterId, RegisterId),
    SRW(RegisterId, RegisterId),
    SRWQ(RegisterId, RegisterId),
    SWW(RegisterId, RegisterId),
    SWWQ(RegisterId, RegisterId),
    TR(RegisterId, RegisterId, RegisterId),
    TRO(RegisterId, RegisterId, RegisterId, RegisterId),
    ECR(RegisterId, RegisterId, RegisterId),
    K256(RegisterId, RegisterId, RegisterId),
    S256(RegisterId, RegisterId, RegisterId),
    NOOP,
    FLAG(RegisterId),
    GM(RegisterId, Immediate18),
    GTF(RegisterId, RegisterId, Immediate12),
}

impl From<FuzzedOp> for Opcode {
    fn from(fuzzed_op: FuzzedOp) -> Opcode {
        match fuzzed_op {
            FuzzedOp::ADD(ra, rb, rc) => Opcode::ADD(ra, rb, rc),
            FuzzedOp::ADDI(ra, rb, imm12) => Opcode::ADDI(ra, rb, imm12),
            FuzzedOp::AND(ra, rb, rc) => Opcode::AND(ra, rb, rc),
            FuzzedOp::ANDI(ra, rb, imm12) => Opcode::ANDI(ra, rb, imm12),
            FuzzedOp::DIV(ra, rb, rc) => Opcode::DIV(ra, rb, rc),
            FuzzedOp::DIVI(ra, rb, imm12) => Opcode::DIVI(ra, rb, imm12),
            FuzzedOp::EQ(ra, rb, rc) => Opcode::EQ(ra, rb, rc),
            FuzzedOp::EXP(ra, rb, rc) => Opcode::EXP(ra, rb, rc),
            FuzzedOp::EXPI(ra, rb, imm12) => Opcode::EXPI(ra, rb, imm12),
            FuzzedOp::GT(ra, rb, rc) => Opcode::GT(ra, rb, rc),
            FuzzedOp::LT(ra, rb, rc) => Opcode::LT(ra, rb, rc),
            FuzzedOp::MLOG(ra, rb, rc) => Opcode::MLOG(ra, rb, rc),
            FuzzedOp::MROO(ra, rb, rc) => Opcode::MROO(ra, rb, rc),
            FuzzedOp::MOD(ra, rb, rc) => Opcode::MOD(ra, rb, rc),
            FuzzedOp::MODI(ra, rb, imm12) => Opcode::MODI(ra, rb, imm12),
            FuzzedOp::MOVE(ra, rb) => Opcode::MOVE(ra, rb),
            FuzzedOp::MOVI(ra, imm18) => Opcode::MOVI(ra, imm18),
            FuzzedOp::MUL(ra, rb, rc) => Opcode::MUL(ra, rb, rc),
            FuzzedOp::MULI(ra, rb, imm12) => Opcode::MULI(ra, rb, imm12),
            FuzzedOp::NOT(ra, rb) => Opcode::NOT(ra, rb),
            FuzzedOp::OR(ra, rb, rc) => Opcode::OR(ra, rb, rc),
            FuzzedOp::ORI(ra, rb, imm12) => Opcode::ORI(ra, rb, imm12),
            FuzzedOp::SLL(ra, rb, rc) => Opcode::SLL(ra, rb, rc),
            FuzzedOp::SLLI(ra, rb, imm12) => Opcode::SLLI(ra, rb, imm12),
            FuzzedOp::SRL(ra, rb, rc) => Opcode::SRL(ra, rb, rc),
            FuzzedOp::SRLI(ra, rb, imm12) => Opcode::SRLI(ra, rb, imm12),
            FuzzedOp::SUB(ra, rb, rc) => Opcode::SUB(ra, rb, rc),
            FuzzedOp::SUBI(ra, rb, imm12) => Opcode::SUBI(ra, rb, imm12),
            FuzzedOp::XOR(ra, rb, rc) => Opcode::XOR(ra, rb, rc),
            FuzzedOp::XORI(ra, rb, imm12) => Opcode::XORI(ra, rb, imm12),
            FuzzedOp::JI(imm24) => Opcode::JI(imm24),
            FuzzedOp::JNEI(ra, rb, imm12) => Opcode::JNEI(ra, rb, imm12),
            FuzzedOp::JNZI(ra, imm18) => Opcode::JNZI(ra, imm18),
            FuzzedOp::JMP(ra) => Opcode::JMP(ra),
            FuzzedOp::JNE(ra, rb, rc) => Opcode::JNE(ra, rb, rc),
            FuzzedOp::RET(ra) => Opcode::RET(ra),
            FuzzedOp::RETD(ra, rb) => Opcode::RETD(ra, rb),
            FuzzedOp::CFEI(imm24) => Opcode::CFEI(imm24),
            FuzzedOp::CFSI(imm24) => Opcode::CFSI(imm24),
            FuzzedOp::LB(ra, rb, imm12) => Opcode::LB(ra, rb, imm12),
            FuzzedOp::LW(ra, rb, imm12) => Opcode::LW(ra, rb, imm12),
            FuzzedOp::ALOC(ra) => Opcode::ALOC(ra),
            FuzzedOp::MCL(ra, rb) => Opcode::MCL(ra, rb),
            FuzzedOp::MCLI(ra, imm18) => Opcode::MCLI(ra, imm18),
            FuzzedOp::MCP(ra, rb, rc) => Opcode::MCP(ra, rb, rc),
            FuzzedOp::MCPI(ra, rb, imm12) => Opcode::MCPI(ra, rb, imm12),
            FuzzedOp::MEQ(ra, rb, rc, rd) => Opcode::MEQ(ra, rb, rc, rd),
            FuzzedOp::SB(ra, rb, imm12) => Opcode::SB(ra, rb, imm12),
            FuzzedOp::SW(ra, rb, imm12) => Opcode::SW(ra, rb, imm12),
            FuzzedOp::BAL(ra, rb, rc) => Opcode::BAL(ra, rb, rc),
            FuzzedOp::BHSH(ra, rb) => Opcode::BHSH(ra, rb),
            FuzzedOp::BHEI(ra) => Opcode::BHEI(ra),
            FuzzedOp::BURN(ra) => Opcode::BURN(ra),
            FuzzedOp::CALL(ra, rb, rc, rd) => Opcode::CALL(ra, rb, rc, rd),
            FuzzedOp::CCP(ra, rb, rc, rd) => Opcode::CCP(ra, rb, rc, rd),
            FuzzedOp::CROO(ra, rb) => Opcode::CROO(ra, rb),
            FuzzedOp::CSIZ(ra, rb) => Opcode::CSIZ(ra, rb),
            FuzzedOp::CB(ra) => Opcode::CB(ra),
            FuzzedOp::LDC(ra, rb, rc) => Opcode::LDC(ra, rb, rc),
            FuzzedOp::LOG(ra, rb, rc, rd) => Opcode::LOG(ra, rb, rc, rd),
            FuzzedOp::LOGD(ra, rb, rc, rd) => Opcode::LOGD(ra, rb, rc, rd),
            FuzzedOp::MINT(ra) => Opcode::MINT(ra),
            FuzzedOp::RVRT(ra) => Opcode::RVRT(ra),
            FuzzedOp::SMO(ra, rb, rc, rd) => Opcode::SMO(ra, rb, rc, rd),
            FuzzedOp::SRW(ra, rb) => Opcode::SRW(ra, rb),
            FuzzedOp::SRWQ(ra, rb) => Opcode::SRWQ(ra, rb),
            FuzzedOp::SWW(ra, rb) => Opcode::SWW(ra, rb),
            FuzzedOp::SWWQ(ra, rb) => Opcode::SWWQ(ra, rb),
            FuzzedOp::TR(ra, rb, rc) => Opcode::TR(ra, rb, rc),
            FuzzedOp::TRO(ra, rb, rc, rd) => Opcode::TRO(ra, rb, rc, rd),
            FuzzedOp::ECR(ra, rb, rc) => Opcode::ECR(ra, rb, rc),
            FuzzedOp::K256(ra, rb, rc) => Opcode::K256(ra, rb, rc),
            FuzzedOp::S256(ra, rb, rc) => Opcode::S256(ra, rb, rc),
            FuzzedOp::NOOP => Opcode::NOOP,
            FuzzedOp::FLAG(ra) => Opcode::FLAG(ra),
            FuzzedOp::GM(ra, imm18) => Opcode::GM(ra, imm18),
            FuzzedOp::GTF(ra, rb, imm12) => Opcode::GTF(ra, rb, imm12),
        }
    }
}
